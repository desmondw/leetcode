#
# @lc app=leetcode id=22 lang=python3
#
# [22] Generate Parentheses
#

# @lc code=start
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        wip = set(['()'])

        for i in range(1,n):
            swap = set()
            for w in wip:
                swap.add('()' + w)      # before
                swap.add(w + '()')      # after
                swap.add('('+ w + ')')  # outside

                # inside / outside each parens
                indexes = self.findIndexes(w, '()')
                for j in indexes:
                    swap.add(w[:j+1] + '()' + w[j+1:]) # inside
                    swap.add(w[:j] + '()' + w[j+2:]) # outside
            wip = swap

        return list(wip)

    def findIndexes(self, text, search):
        indexes = []
        offset = 0
        while (i:=text.find(search)) > -1:
            print(offset, i)
            indexes.append(offset + i)
            offset += i+2
            text = text[offset:]
        return indexes

    # CURRENT ISSUE:
    # >>> a = set(["((())(()))","(())(())()","()(()()())","()(()())()","(())((()))","(((()))())","((()(())))","()()()()()","()()(())()","(())()()()","(()()(()))","((()))()()","()()()(())","(())(()())","((())())()","()(())()()","()(()(()))","()()(()())","((()()))()","(((())()))","((()()()))","(())()(())","()(((())))","((())()())","()((()))()","(()(()()))","()()((()))","(()(()))()","(()((())))","((()())())","()(())(())","(((())))()","(()(())())","()((()()))","((((()))))","(()())()()","()((())())","((()))(())","(((()())))","(()()()())","(()()())()"])
    # >>> b = set(["((((()))))","(((()())))","(((())()))","(((()))())","(((())))()","((()(())))","((()()()))","((()())())","((()()))()","((())(()))","((())()())","((())())()","((()))(())","((()))()()","(()((())))","(()(()()))","(()(())())","(()(()))()","(()()(()))","(()()()())","(()()())()","(()())(())","(()())()()","(())((()))","(())(()())","(())(())()","(())()(())","(())()()()","()(((())))","()((()()))","()((())())","()((()))()","()(()(()))","()(()()())","()(()())()","()(())(())","()(())()()","()()((()))","()()(()())","()()(())()","()()()(())","()()()()()"])
    # >>> b-a
    # {'(()())(())'}
# @lc code=end

